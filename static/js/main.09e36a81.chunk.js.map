{"version":3,"sources":["components/Employee.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","src","image","alt","name","phone","href","newEmail","target","rel","email","dob","Nav","Jumbotron","className","Navbar","bg","expand","Toggle","aria-controls","Collapse","id","Form","inline","FormControl","type","placeholder","onChange","handleInputChange","value","Button","onClick","handleFormSubmit","variant","DropdownButton","title","drop","Dropdown","Item","as","handleSortChange","App","state","employees","pending","search","sortBy","searchEmployees","axios","get","then","res","setState","data","results","event","preventDefault","this","Table","striped","bordered","hover","length","sort","a","b","date","first","last","map","thisEmployee","includes","key","picture","large","substr","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09e36a81.chunk.js","sourcesContent":["import React from 'react';\nimport \"./style.css\";\n\nfunction Employee(props) {\n\n    return (\n        <tr>\n            <td>\n                <img \n                    src={props.image} \n                    alt={props.name}\n                />\n            </td>\n            <td>{props.name}</td>\n            <td>{props.phone}</td>\n            <td>\n                <a \n                    href={props.newEmail}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                {props.email}\n                </a>\n            </td>\n            <td>{props.dob}</td>\n        </tr>\n    );\n}\n\nexport default Employee;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\n\n\nexport default function Nav(props) {\n    return (\n        <div>\n            <Jumbotron className=\"jumbo\">\n                <div className=\"jumboText\">\n                <h1>Employee Directory</h1>\n                </div>\n            </Jumbotron >\n            <Navbar bg=\"light\" expand=\"lg\" className=\"navbarClass\">\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Form inline className=\"searchBar\">\n                    <FormControl \n                        type=\"text\" \n                        placeholder=\"Search\" \n                        className=\"mr-sm-2\" \n                        onChange={props.handleInputChange}\n                        value={props.value}\n                    />\n                    <Button \n                        onClick={props.handleFormSubmit} \n                        variant=\"outline-success\">\n                            Search\n                    </Button>\n                </Form>\n            </Navbar.Collapse>\n            <DropdownButton id=\"dropdown-basic-button\" variant=\"outline-info\" title=\"Sort By\" drop=\"left\">\n                        <Dropdown.Item as=\"button\" value=\"oldest\" onClick={props.handleSortChange}>Age Up</Dropdown.Item>\n                        <Dropdown.Item as=\"button\" value=\"youngest\" onClick={props.handleSortChange}>Age Down</Dropdown.Item>\n                        <Dropdown.Item as=\"button\" value=\"firstName\" onClick={props.handleSortChange}>First Name</Dropdown.Item>\n                        <Dropdown.Item as=\"button\" value={\"lastName\"} onClick={props.handleSortChange}>Last Name</Dropdown.Item>\n                    </DropdownButton>\n            </Navbar>\n        </div>\n    );\n}","import React from 'react';\nimport Employee from \"./components/Employee\";\nimport Nav from \"./components/Nav\";\n// import employees from \"./Employees.json\";\nimport Table from 'react-bootstrap/Table';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\n\n// to sort the employees alphabetically\n// employee.name.sort()\n\nclass App extends React.Component {\n\n  state = {\n    employees: {},\n    pending: \"\",\n    search: \"\",\n    sortBy: \"firstName\"\n  };\n\n  componentDidMount() {\n    this.searchEmployees();\n  }\n\n  searchEmployees = () => {\n    axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\n    .then(res => this.setState({ employees: res.data.results })\n    )\n  }\n\n  handleInputChange = event => {\n    this.setState({\n      pending: event.target.value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.setState({ search: this.state.pending})\n  };\n\n  handleSortChange = event => {\n    event.preventDefault();\n    this.setState({\n      sortBy: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"employeeTable\">\n        <Nav \n          value={this.state.pending}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n          handleSortChange={this.handleSortChange}\n        />\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>Phone</th>\n              <th>Email</th>\n              <th>DOB</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.length > 0 ? \n              this.state.employees\n              .sort((a,b) => {\n                if ( this.state.sortBy === \"oldest\" ) {\n                  return (a.dob.date > b.dob.date) ? 1 : -1;\n                }\n                else if (this.state.sortBy === \"youngest\") {\n                  return (a.dob.date > b.dob.date) ? -1 : 1;\n                }\n                else if (this.state.sortBy === \"firstName\") {\n                  return (a.name.first > b.name.first) ? 1 : -1;\n                }\n                else if (this.state.sortBy === \"lastName\") {\n                  return (a.name.last > b.name.last) ? 1 : -1;\n                }\n              })\n              .map(thisEmployee => (\n                  thisEmployee.name.first.includes(this.state.search) \n                  ||\n                  thisEmployee.name.last.includes(this.state.search)\n                  ||\n                  thisEmployee.phone.includes(this.state.search)\n                  ||\n                  thisEmployee.email.includes(this.state.search)\n                   ?\n                  <Employee\n                    key={thisEmployee.id.value}\n                    image={thisEmployee.picture.large}\n                    name={thisEmployee.name.first + \" \" + thisEmployee.name.last}\n                    phone={thisEmployee.phone}\n                    email={thisEmployee.email}\n                    dob={thisEmployee.dob.date.substr(0, 10)}\n                    newEmail={\"mailto:\" + thisEmployee.email}\n                  />\n                  :\n                  null\n              ))\n              : \n              null\n            }\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}